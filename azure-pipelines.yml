# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

parameters:
  - name: BUSINESSUNIT
    values:
      - SERVICES
      - NMGR
      - HOSTING
    default: SERVICES

stages:
- stage: Parent
  displayName: 'Parent - This is a Stage'
  jobs:
  # - job: FirstJob
    # displayName: 'First Job'
    # #continueOnError: true #Setting it here means that continue any other job which depends on it. So in this case, Second job will continue, but steps within this job will be skipped.
    # steps:
    # - script: echo This is the first step
    # - task: PowerShell@2
      # displayName: Check Security/Common DB
      # continueOnError: true
      # inputs:
        # pwsh: true
        # targetType: 'inline'
        # script: |
          # # Write your PowerShell commands here.
          # Write-Host "Reached Here-----------------*-------------------"
          # $allLogs = $null
          # $success = $true
          # $errorMessage = ""
          # try {
            # $allLogs = check.ps1
          # }
          # catch {
            # $success = $false
            # $errorMessage = $_
          # }

          # Write-Host "Logs....."
          # $allLogs | Write-Host
          # Write-Host "After..."


          # if (-Not $success) {
            # Write-Error $errorMessage
          # }

    # - task: PowerShell@2
      # displayName: New Step
      # inputs:
        # pwsh: true
        # targetType: 'inline'
        # script: |
          # # Write your PowerShell commands here.
          # Write-Host "This is new step"
    
    # - task: VSTest@2
      # condition: failed()
      # displayName: Run this if Check fails
      # inputs:
        # platform: '$(buildPlatform)'
        # configuration: '$(buildConfiguration)'
    
    # - script: |
        # echo Here condition is not set. And the step immediately before it succeeds. Still this step will not run because of Check step failure. Unless its continueOnError is true.
      # displayName: Check if this Runs

  # - job: SecondJob
    # displayName: 'Second Job'
    # dependsOn: FirstJob
    # steps:
    # - script: |
        # echo This is the first step of second job. This will run only if First Job succeeds because it dependsOn: FirstJob
      # displayName: First Step
    # - script: |
        # echo This is second step of second job.
      # displayName: Second Step
    # - script: |
        # echo This is third step of second job.
      # displayName: Third Step
  
  # - job: ThirdJob
    # displayName: 'Third Job'
    # steps:
    # - script: |
        # echo This job and step will always run as it does not dependsOn any job. It might even run before First Job because each job is independent of another
      # displayName: First Step
  
  # - job: FourthJob
    # displayName: 'Fourth Job'
    # condition: succeeded('ThirdJob')
    # dependsOn: SecondJob
    # #Both condition: and dependsOn: should succeed to run this
    # steps:
    # - script: |
        # echo This is the first step of fourth job. This will run only if Second Job succeeds because it dependsOn: FirstJob
      # displayName: First Step


  # - job: WarningJob
    # displayName: 'Warning Job'
    # steps:
    # - task: PowerShell@2
      # displayName: Log Warning
      # inputs:
        # pwsh: true
        # targetType: 'inline'
        # script: |
          # # Write your PowerShell commands here.
          # Write-Host "##vso[task.complete result=SucceededWithIssues;]"

  - job: WSODBUpdate
    displayName: 'WSO DB Update'
    continueOnError: true
    steps:
    - script: |
        echo This is the first step
        throw "first exception"
      displayName: First Step
    - script: |
        echo This is the second step
      displayName: 'Print Commandlines'
      name: 
    - script: |
        echo This is the update step
      displayName: Update Common DB
      condition: true
    - script: |
        echo This is the update step
      displayName: Update Data DB
      condition: true
    - script: |
        echo This is the update step
      displayName: Update Messaging DB
      condition: true  
    - script: |
        echo This is the update step
      displayName: Update Compliance DB
      condition: true  
    - script: |
        echo This is the check step
      displayName: Check Common
      condition: true  
    - script: |
        echo This is the check step
      displayName: Check Data DB
      condition: true  
    - script: |
        echo This is the check step
      displayName: Check Messaging DB
      condition: true  
    - script: |
        echo This is the check step
      displayName: Check Compliance DB
      condition: true
    - task: PowerShell@2
      displayName: Check Security/Common DB
      condition: true
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          
          $allLogs = @("C#", "Java NEW", "Not all SQL scripts executed successfully")
          
          if ($allLogs.Contains("Not all SQL scripts executed successfully"))
          {
            Write-Output "##vso[task.complete result=SucceededWithIssues;]Test value"
          }
          
    - script: |
        echo This is the Publish step
      displayName: Publish Step
      condition: succeededOrFailed()

  - job: WebDBUpdate
    displayName: 'Web DB Update'
    condition: and(succeeded(), eq('${{ parameters.BUSINESSUNIT }}', 'SERVICES'))
    dependsOn: WSODBUpdate
    steps:
    - script: |
        echo This is the first step
      displayName: First Step