# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'


stages:
- stage: Parent
  displayName: 'Parent - This is a Stage'
  jobs:
  - job: FirstJob
    displayName: 'First Job'
    #continueOnError: true #Setting it here means that continue any other job which depends on it. So in this case, Second job will continue, but steps within this job will be skipped.
    steps:
    - script: echo This is the first step
    - task: PowerShell@2
      displayName: Check Security/Common DB
      continueOnError: true
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          Write-Host "Reached Here-----------------*-------------------"
          $allLogs = $null
          $success = $true
          $errorMessage = ""
          try {
            $allLogs = check.ps1
          }
          catch {
            $success = $false
            $errorMessage = $_
          }

          Write-Host "Logs....."
          $allLogs | Write-Host
          Write-Host "After..."


          if (-Not $success) {
            Write-Error $errorMessage
          }

    - task: PowerShell@2
      displayName: New Step
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          Write-Host "This is new step"
    
    - task: VSTest@2
      condition: failed()
      displayName: Run this if Check fails
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    
    - script: |
        echo Here condition is not set. And the step immediately before it succeeds. Still this step will not run because of Check step
      displayName: Check if this Runs

  - job: SecondJob
    displayName: 'Second Job'
    dependsOn: FirstJob
    steps:
    - script: |
        echo This is the first step of second job. This will run only if First Job succeeds because it dependsOn: FirstJob
      displayName: First Step
  
  - job: ThirdJob
    displayName: 'Third Job'
    steps:
    - script: |
        echo This job and step will always run as it does not dependsOn any job. It might even run before First Job because each job is independent of another
      displayName: First Step
